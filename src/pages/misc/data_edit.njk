{% extends "base.njk" %}

{% block headStyle %}
    .entry {
      padding: 15px;
      margin-bottom: 10px;
      border-radius: 8px;
    }

    .entry input, .entry textarea {
      width: 100%;
      padding: 6px;
      margin-top: 5px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
      color: #FFF;
      background: linear-gradient(180deg, #212526e6 0, #1e2222e6 30%, #181f22e6 50%, #0d1013e6 100%);
    }

    .entry textarea {
      height: 150px;
      -ms-overflow-style: none;
      scrollbar-width: none;
    }

    .entry textarea::-webkit-scrollbar {
      display: none;
    }

    .json-controls {
      margin-bottom: 10px;
    }

    #json-selector {
      padding: 5px;
      background-color: #171b1f;
      color: #fff;
      border: 1px solid #FFF;
      color: #e23a45;
      border-radius: 4px;
    }

    .json-controls button {
      background-color: #171b1f;
      border: 1px white solid;
      padding: 5px;
      height: 29px;
      border-radius: 4px;
      cursor: pointer;
    }

{% endblock %}

{% block content %}
<div class="background-div">
    <div class="json-controls">
      <select id="json-selector">
        <option value=""></option>
        <option value="/_data/comics.json">Comics</option>
        <option value="/_data/music.json">Music</option>
        <option value="/_data/games.json">Games</option>
        <option value="/_data/tv.json">TV</option>
      </select>
      <button id="addNewEntryBtn" onclick="addNewEntry()">Add New Entry</button>
      <button id="copyJsonBtn" onclick="copyJSON()">Copy JSON to Clipboard</button>
      <button id="loadMoreBtn">Loading...</button>
  </div>
  <div id="json-container"></div>
</div>
<script>
  let fullData = [];
  let visibleData = [];
  const MAX_VISIBLE = 10;
  const addNewEntryBtn = document.getElementById('addNewEntryBtn');
  const copyJsonBtn = document.getElementById('copyJsonBtn');
  const loadMoreBtn = document.getElementById('loadMoreBtn');
  loadMoreBtn.style.display = "none";
  addNewEntryBtn.style.display = "none";
  copyJsonBtn.style.display = "none";

  document.getElementById('json-selector').addEventListener('change', async function () {
    const url = this.value;
    loadMoreBtn.style.display = "inline-block";
    addNewEntryBtn.style.display = "inline-block";
    copyJsonBtn.style.display = "inline-block";
    if (!url) return;

    try {
      const res = await fetch(url);
      fullData = await res.json();

      visibleData = fullData.slice(0, MAX_VISIBLE);
      renderJSON(visibleData);

      loadMoreBtn.textContent = `Load All Entries (${fullData.length})`;
      loadMoreBtn.onclick = () => {
        visibleData = fullData;
        renderJSON(visibleData);
        loadMoreBtn.style.display = "none";
      };
    } catch (err) {
      alert('Failed to load JSON: ' + err);
    }
  });

  function renderJSON(data) {
    const container = document.getElementById('json-container');
    container.innerHTML = '';

    data.forEach((item, index) => {
      const entryDiv = document.createElement('div');
      entryDiv.className = 'entry';

      for (let key in item) {
        const label = document.createElement('label');
        const globalIndex = fullData.indexOf(item);
        label.textContent = key;

        let input;
        if (key === 'description') {
          input = document.createElement('textarea');
          input.rows = 3;
        } else {
          input = document.createElement('input');
          input.type = typeof item[key] === 'number' ? 'number' : 'text';
        }

        input.value = item[key];
        input.dataset.index = globalIndex;
        input.dataset.key = key;

        entryDiv.appendChild(label);
        entryDiv.appendChild(input);
      }

      container.appendChild(entryDiv);
    });
  }

  function copyJSON() {
    const inputs = document.querySelectorAll('#json-container input, #json-container textarea');

    inputs.forEach(input => {
      const index = parseInt(input.dataset.index);
      const key = input.dataset.key;
      let value = input.value;

      if (!isNaN(value) && value.trim() !== '') {
        const numVal = parseFloat(value);
        value = String(numVal) === value.trim() ? numVal : value;
      }

      if (fullData[index]) {
        fullData[index][key] = value;
      }
    });

    const jsonString = JSON.stringify(fullData, null, 2);
    navigator.clipboard.writeText(jsonString);
  }

  function addNewEntry() {
    const base = visibleData[0]
      ? Object.fromEntries(Object.keys(visibleData[0]).map(k => [k, '']))
      : {};

    visibleData.unshift(base);
    fullData.unshift(base);
    renderJSON(visibleData);
  }
</script>
{% endblock %}